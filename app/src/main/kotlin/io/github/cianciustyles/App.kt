/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.cianciustyles

import java.io.File

fun main() {
    // Image
    val aspectRatio = 16.0 / 9.0
    val imageWidth = 400
    val imageHeight = (imageWidth / aspectRatio).toInt()

    // World
    val world = HittableList()
    world.add(Sphere(Point3(0.0, 0.0, -1.0), 0.5))
    world.add(Sphere(Point3(0.0, -100.5, -1.0), 100.0))

    // Camera
    val viewportHeight = 2.0
    val viewportWidth = aspectRatio * viewportHeight
    val focalLength = 1.0

    val origin = Point3()
    val horizontal = Vector3(viewportWidth, 0.0, 0.0)
    val vertical = Vector3(0.0, viewportHeight, 0.0)
    val lowerLeftCorner = origin - horizontal / 2 - vertical / 2 - Vector3(0.0, 0.0, focalLength)

    // Render
    File("image.ppm").bufferedWriter().use { image ->
        image.write("")
        image.write("P3\n")
        image.write("$imageWidth $imageHeight\n")
        image.write("255\n")

        for (j in (0 until imageHeight).reversed()) {
            System.err.println("Scanlines remaining: $j")

            for (i in 0 until imageWidth) {
                val u = i.toDouble() / (imageWidth - 1)
                val v = j.toDouble() / (imageHeight - 1)
                val r = Ray(origin, lowerLeftCorner + horizontal * u + vertical * v - origin)
                val pixelColor = r.rayColor(world)

                image.write("$pixelColor\n")
            }
        }
    }

    System.err.println("Done.")
}
