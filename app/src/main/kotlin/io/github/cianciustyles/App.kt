/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package io.github.cianciustyles

import java.io.File
import kotlin.random.Random

fun main() {
    // Image
    val aspectRatio = 16.0 / 9.0
    val imageWidth = 400
    val imageHeight = (imageWidth / aspectRatio).toInt()
    val samplesPerPixel = 100
    val maxDepth = 50

    // World
    val world = HittableList()

    val materialGround = Lambertian(Color(0.8, 0.8, 0.0))
    val materialCenter = Lambertian(Color(0.1, 0.2, 0.5))
    val materialLeft   = Dielectric(1.5)
    val materialRight  = Metal(Color(0.8, 0.6, 0.2), 0.0)

    world.add(Sphere(Point3( 0.0, -100.5, -1.0), 100.0, materialGround))
    world.add(Sphere(Point3( 0.0,    0.0, -1.0),   0.5, materialCenter))
    world.add(Sphere(Point3(-1.0,    0.0, -1.0),   0.5, materialLeft))
    world.add(Sphere(Point3(-1.0,    0.0, -1.0), -0.45, materialLeft))
    world.add(Sphere(Point3( 1.0,    0.0, -1.0),   0.5, materialRight))

    // Camera
    val camera = Camera(
        Point3(-2.0,2.0,1.0),
        Point3(0.0,0.0,-1.0),
        Vector3(0.0,1.0,0.0),
        20.0,
        aspectRatio
    )

    // Render
    File("image.ppm").bufferedWriter().use { image ->
        image.write("")
        image.write("P3\n")
        image.write("$imageWidth $imageHeight\n")
        image.write("255\n")

        for (j in (0 until imageHeight).reversed()) {
            System.err.println("Scanlines remaining: $j")

            for (i in 0 until imageWidth) {
                var pixelColor = Color.BLACK

                for (s in 0 until samplesPerPixel) {
                    val u = (i + Random.nextDouble()) / (imageWidth - 1)
                    val v = (j + Random.nextDouble()) / (imageHeight - 1)
                    val ray = camera.getRay(u, v)
                    pixelColor += ray.rayColor(world, maxDepth)
                }

                image.write("${pixelColor.writeColor(samplesPerPixel)}\n")
            }
        }
    }

    System.err.println("Done.")
}
